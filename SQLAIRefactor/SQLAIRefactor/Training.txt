Read and analyze all the provided T-SQL batch and apply the following rules:

1. When you find a statement such as “SELECT * FROM Expression”, read all the batch, and identify which columns of that Expression are really used in the batch after that SELECT statement. 
Replace the “*” in the SELECT with only the columns you found as really used. If reading the code below the “SELECT *” statement it is not possible to understand which columns 
are really used, don’t make any assumption and replace the * with all column’s names of the table. You have the list of columns of all tables provided to you in JSON format.

2. Identify the SELECT statements that uses old syntax implicit joins, meaning that multiple tables are specified in the FROM clause separated by commas and the join columns in the WHERE clause. Rewrite these statements and use explicit join syntax with proper ‘JOIN’ keyword and specify the join columns with keyword ‘ON’.
Ensure that all table relationships and filter conditions remain logically equivalent.

3. When an ORDER BY clause is written using the column numbers (for example: ORDER BY 1, 3, 5) rewrite the ORDER BY clause replacing the numbers with column names used in the SELECT clause to avoid any confusion.

4. When a GROUP BY clause is written using the column numbers (for example: GROUP BY 1, 3, 5) rewrite the GROUP BY clause replacing the numbers with column names used in the SELECT clause to avoid any confusion.

5.When you find WHERE expression containing functions on column such as: CEILING(column) = x, or FLOOR(column) = x, or ROUND(column) don’t use any function on the column. Rewrite the WHERE expression leaving the column alone on left side of the comparison and rewrite an equivalent condition on x modifying the right side of the comparison. Apply the following rules:
a) “WHERE CEILING(UnitPrice) = 714” must be rewritten as “WHERE UnitPrice > 713 AND UnitPrice <= 714”
b) “WHERE FLOOR(UnitPrice) = 714” must be rewritten as “WHERE UnitPrice >= 714 AND UnitPrice < 715”
c) “WHERE ROUND(UnitPrice) = 714” must be rewritten as “WHERE UnitPrice BETWEEN 714 – 0.5 AND UnitPrice < 714 + 0.5”

6. If the provided code contains a WHERE condition with the SIGN() function applied to a column rewrite the query to avoid the function and make the condition SARGable. Apply the following rules:
a) “WHERE SIGN(SalesOrderID) = 1” must be rewritten as  “WHERE SalesOrderID > 0”
b) “WHERE SIGN(SalesOrderID) = -1” must be rewritten as “WHERE SalesOrderID < 0”
c) “WHERE SIGN(SalesOrderID) = 0” must be rewritten as “WHERE SalesOrderID = 0”

7. When the WHERE expression contains functions on column such as: ABS(column), SQRT(column) or POWER(column,2) having the column as parameter, rewrite the WHERE expression leaving the column alone on left side of the comparison and rewrite an equivalent condition modifying the right side of the comparison as shown in the following examples. Apply the following rules:
a) “WHERE ABS(level) < value”  must be rewritten as “WHERE level < value AND level > -value”
b) “WHERE SQRT(column) <  value” must be rewritten as: “WHERE column < POWER(value,2)”
c) “WHERE POWER(column,2) <  value” must be rewritten as: “WHERE column < SQRT(value)”

8. In a WHERE comparison clause, if there are calculations or transformations on a column, then leave the column alone on left side and move the equivalent calculation on the right. On the left side of the comparison there should appear only the column without any operator applied. This ensures better performance, as it allows SQL Server to optimize index usage effectively.
Examples:
a) avoid “WHERE price * 12 = 550“ replace with “WHERE price = 550/12”
b) avoid “WHERE price + 12 = 550“ replace with “WHERE price = 550-12”
c) avoid “WHERE price / 12 = 550“ replace with “WHERE price = 550*12”

9. If the WHERE condition is an equation-like expression, rewrite this T-SQL WHERE clause to make it SARGable by isolating the column on left side of the comparison. Apply the basic algebraic manipulation equation principles to isolate the column on left side. Verify that the rewritten condition has the same mathematical meaning.

10. When you find WHERE conditions containing LIKE operator such as: LIKE ‘%text’ or LIKE ‘%text%’, apply the following rules:
a) If the string to search has ‘%’ at the beginning of the string to search, use the RIGHT function instead. For example replace: “WHERE AddressLine LIKE ‘%way’” with: “WHERE RIGHT(AddressLine,3) = ‘way’”
b) If the string to search is between two wildcards‘%’, use the PATINDEX function instead. For example replace: “WHERE AddressLine LIKE ‘%way%’” with: “WHERE CHARINDEX(‘way’, AddressLine, 0) > 0”
c) If the string to search has wildcard ‘%’ at the end of the string, don’t modify this condition. For example: “WHERE AddressLine LIKE ‘way%’” don’t modify that.
d) If the WHERE condition contains both conditions: “column LIKE ‘%way'” AND “column LIKE ‘way%'” then rewrite as “column = ‘way'”

11. When you find WHERE expression containing functions on column such as: DATEPART(column) or DATEADD(column) having the column as parameter, rewrite the WHERE expression leaving the column alone on left side of the comparison and rewrite an equivalent condition modifying the right side of the comparison. Apply the following rules:
a) “WHERE DATEADD(DAY, 30, ModifiedDate) >= ‘2024-01-01′” must be rewritten as: “WHERE ModifiedDate >= DATEADD(DAY, -30, ‘2024-01-01’)”
b) “WHERE DATEPART(YEAR, ModifiedDate) = 2013” must be rewritten as: “WHERE ModifiedDate >= ‘2013-01-01’ AND ModifiedDate < ‘2014-01-01′”.

12. When you find WHERE expression with comparisons containing functions on column such as: DATEPART(column) or DATEADD(column) having the column as parameter, rewrite the WHERE expression leaving the column alone on left side of the comparison and rewrite an equivalent condition modifying the right side of the comparison. Apply the following rules:
a) “WHERE DATEDIFF(day, ModifiedDate, ‘2011-05-31’) <= 5” must be rewritten as: “WHERE ModifiedDate >= DATEADD(day, -5, ‘2011-05-31’)”
b) “WHERE DATEDIFF(month, ‘2011-06-30’, ModifiedDate) > 5” must be rewritten as: “WHERE ModifiedDate > DATEADD(month, 5, ‘2011-06-30’)”.

13. If in the WHERE clause the YEAR function is applied to a column, rewrite the statement using range comparison according to the following example:
“YEAR(OrderDate) = 2022” must be rewritten as: “OrderDate >= ‘2022-01-01’ AND OrderDate < ‘2023-01-01′”.

14. If the provided code contains a WHERE condition with the ISNULL() function applied to a column rewrite the query to avoid the function and make the condition SARGable. Apply the following rule:
WHERE ISNULL(ColumnX, <entity>) > 23  must be rewritten as:  WHERE (ColumnX > 23 OR ColumnX IS NULL AND <entity> > 23)

15. Analyze the provided code carefully to identify UNUSED elements such as parameters or variables or items that are declared in DECLARE statement and after such declaration they don’t appear in the code anymore. Before you decide something is unused, check that if it’s really not used after DECLARE declaration line. Identify again all unused items, and return the query rewritten by removing all unused items that you identified from the code. Unused items can be:
a) function or stored procedure parameters never used in the body: remove them also from the function or stored procedure definition.
b) variables or table variables never used after creation. Remove them.
c) temporary tables created in the code and never used after the creation. Remove them.

16. In a multi line function, check the entire flow of the SQL code from start to finish. Determine which elements do not contribute (redundant or irrelevant) to the final RETURN statement. Remove redundant or irrelevant items them from the body of the function. Irrelevant items can be the following:
a) function parameters. Remove them from the function definition.
b) variables or table variables not related to the result. Remove them.
c) irrelevant pieces of code not contributing to the Returned value. Remove them.

17. If the provided code contains the declaration of a temporary table or table variable having columns of data types: TEXT, NTEXT, or IMAGE, then replace those columns with the modern equivalent data types:
a) Replace TEXT with VARCHAR(MAX)
b) Replace NTEXT with NVARCHAR(MAX)
c) Replace IMAGE with VARBINARY(MAX)
Ensure the new version of batch uses either a temporary table or a table variable with the updated data types.

18. You have information about the data type of every column of every table, provided to you in JSON format. In the original code, identify all WHERE conditions containing comparisons 
between column and variable or parameter, using operators such as: =, >, >=, <, or <=. Determine the column’s data type based on the provided JSON data and determine the variable’s or 
parameter’s data type by analyzing the code. If the column and variable have different data types, rewrite the WHERE condition leaving the column alone on left side of the comparison without any conversion. 
On the right side apply the CONVERT() function to the variable to match the column’s data type or declare the variable with the same data type as the column. 
At the end, column and variable must have exactly the same data type.

19. You have information about the data type of every column of every table, provided to you in JSON format. In the original code, identify all WHERE conditions containing comparisons 
between column and constants or literals, using operators such as: =, >, >=, <, or <=. Determine the column’s data type based on the provided JSON data and determine the literal or constant data type. 
If the column and constant have different data types, rewrite the WHERE condition leaving the column alone on left side of the comparison without any conversion. 
On the right side apply the CONVERT() function to the constant or literal to match the column’s data type. At the end, column and constant must have exactly the same data type.



19. Analize the provided code and identify dynamic SQL executions such as:  "EXEC @query" or "EXEC sp_executesql @query" without parameters. Identify only the cases with the command string @query is unvalidated AND it is built by concatenating multiple strings or variables. In this cases rewrite the code using one of the following two alternative options:
1. keep EXEC @query, and add to to the code additional check validations on sql string. Add the verification that the command string @query doesn't contain suspicious keywords "DROP", "DELETE", ";", "UPDATE". In addition report a warning comment in the modified code.
2. Replace EXEC with EXEC sp_executesql @query, passing parameters instead concatenating paramenters in the @query command string.
3. If the argument of EXEC function is a fixed query not built concatenating any variable, just remove exec and execute the argument statement.

Analyze the provided code and identify dynamic SQL executions such as: “EXEC @query” or “EXEC sp_executesql @query” without parameters. Identify only the cases with the command string @query is unvalidated AND it is built by concatenating multiple strings or variables without checking the content. In this cases rewrite the code using one of the following alternative options:
1) keep ‘EXEC @query’, and add to to the code additional check validations on sql string. Add the verification that the command string @query doesn’t contain suspicious keywords “TRUNCATE”, “DROP”, “DELETE”, “;”, “UPDATE”. In addition report a warning comment in the modified code.
2) Replace ‘EXEC @query’ with ‘EXEC sp_executesql @query’, passing parameters instead of concatenating parameters inside the @query string.
3) If the argument of EXEC function is a fixed query not built concatenating any variable, just remove exec and execute the argument statement.